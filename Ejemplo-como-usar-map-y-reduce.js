Soluci√≥n al promedio ponderado
Eleg√≠ trabajar con la media aritm√©tica ponderada. Este es un promedio muy similar a la media aritm√©tica, pero nos permite definir tambi√©n el peso, importancia o relevancia de cada elemento en nuestro conjunto de n√∫meros.

Un caso de uso de la media ponderada es el c√°lculo de notas acad√©micas cuando cada materia o asignatura otorga diferentes ‚Äúcr√©ditos‚Äù.

Esta es su f√≥rmula:

Promedio ponderado
En espa√±ol: multiplicar cada n√∫mero del conjunto por su respectivo cr√©dito, sumar todos los resultados y dividirlo entre la suma de todos los cr√©ditos.

Recuerda que no tienen que ser √∫nicamente 3 n√∫meros, pueden ser lo que desees, esto solo fue un ejemplo.

Ahora s√≠, vamos paso a paso implementando el promedio ponderado en JavaScript:

Definir el conjunto de n√∫meros junto al peso de cada elemento
Para esto vamos a crear un array de objetos llamado notes. Cada objeto tendr√° tres valores: course con el nombre de la materia (aunque en realidad no lo utilizaremos üòÖ), note con la nota de la materia y credit con los cr√©ditos de la materia.

const notes = [
    {
        course: "Educaci√≥n F√≠sica",
        note: 10,
        credit: 2,
    },
    {
        course: "Programaci√≥n",
        note: 8,
        credit: 5,
    },
    {
        course: "Finanzas personales",
        note: 7,
        credit: 5,
    },
];
Ahora vamos paso a paso construyendo nuestra m√°quina para sacar promedios ponderados.

Multiplicar cada n√∫mero de la lista por su peso
Vamos a usar de nuevo el m√©todo map de los arrays. Crearemos un nuevo arreglo de solo n√∫meros a partir de multiplicar cada nota con sus cr√©ditos.

const notesWithCredit = notes.map(function (noteObject) {
    return noteObject.note * noteObject.credit;
});
Sumar todos los elementos del arreglo de elementos multiplicados por su peso
Vamos a usar de nuevo el m√©todo reduce de los arrays.

Crearemos una nueva variable sumOfNotesWithCredit que tenga como resultado la suma de todos los elementos del arreglo notesWithCredit. Recuerda que la funci√≥n reduce recibe una funci√≥n con dos par√°metros: el valor acumulado (que para evitar errores debemos inicializar con 0) y el nuevo elemento de los arrays.

const sumOfNotesWithCredit = notesWithCredit.reduce(
    function (sum = 0, newVal) {
        return sum + newVal;
    }
);
Sumar todos los pesos (cr√©ditos)
S√≠, otra vez map y reduce. Vamos a crear un nuevo arreglo credits √∫nicamente con los cr√©ditos de cada materia y otra nueva variable sumOfCredits que recorra el arreglo credits y sume sus elementos.

const credits = notes.map(function (noteObject) {
    return noteObject.credit;
});

const sumOfCredits = credits.reduce(
    function (sum = 0, newVal) {
        return sum + newVal;
    }
);
Hacer la divisi√≥n entre ambas ‚Äúsumas‚Äù
Lo √∫ltimo que nos falta es dividir nuestra variable sumOfNotesWithCredit sobre la variable sumOfCredits.

const promedioPonderadoNotasConCreditos = sumOfNotesWithCredit / sumOfCredits;
En este caso, el promedio ponderado de una nota de 10 con cr√©ditos de 2, otra nota de 8 con un cr√©dito de 5 y una √∫ltima nota de 7 con cr√©ditos de 5 nos da como resultado 7.916.

La media aritm√©tica sin tener en cuenta el peso de cada nota habr√≠a sido 8.333.

Espero que este √∫ltimo ejercicio te haya ayudado a interiorizar un poco m√°s el uso de los m√©todos de los arrays para obtener diferentes resultados con ellos.

Te espero en la siguiente clase para iniciar nuestro √∫ltimo y m√°s avanzado taller de este curso.